{"version":3,"sources":["../../src/graficos/Grafico.js"],"names":["React","PureComponent","PropTypes","Highcharts","Grafico","props","toggleModoApresentacao","console","debug","options","yAxis","labels","style","fontSize","getCss","font","xAxis","title","legend","itemStyle","chart","type","id","modules","Math","random","state","series","css","modoApresentacao","forEach","module","_self","config","zoomType","text","categories","crosshair","color","getOptions","colors","tooltip","shared","credits","enabled","plotOptions","serie","i","push","format","name","opposite","merge","montaGrafico","prevProps","prevState","destroyChart","axisTitle","attr","destroy","chipsFiltros","propTypes","array","isRequired","bool","defaultProps"],"mappings":"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","file":"Grafico.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Highcharts from 'highcharts';\n\n\nclass Grafico extends PureComponent {\n\n    static propTypes = {\n        series          : PropTypes.array.isRequired,\n        modoApresentacao: PropTypes.bool\n    };\n\n    static defaultProps = {\n        series          : [],\n        modoApresentacao: false\n    };\n\n\n    constructor(props) {\n        super(props);\n        this.chart   = null;\n        this.modules = [];\n\n        this.id = \"grafico\" + Math.random();\n\n        this.state = {\n            series: this.props.series\n        };\n    }\n\n    getCss() {\n        const css = {\n            fontSize: '12px'\n        };\n        if (this.props.modoApresentacao) {\n            css.fontSize = '18px';\n        } else {\n\n        }\n        return css;\n    }\n\n\n    componentDidMount() {\n\n\n        if (this.modules) {\n            this.modules.forEach(function (module) {\n                module(Highcharts);\n            });\n        }\n\n        let _self    = this;\n        const config = {\n            chart      : {\n                zoomType: 'xy'\n            },\n            title      : {\n                text: ''\n            },\n            xAxis      : [{\n                categories: this.props.categories,\n                crosshair : true,\n                labels    : {\n                    style: {\n                        fontSize: this.getCss().fontSize,\n                        font    : this.getCss().fontSize,\n                        color   : Highcharts.getOptions().colors[1]\n                    }\n                },\n            }],\n            yAxis      : [],\n            tooltip    : {\n                shared: true\n            },\n            credits    : {\n                enabled: false\n            },\n            legend     : {\n                itemStyle: {\n                    fontSize: this.getCss().fontSize,\n                    font    : this.getCss().fontSize,\n                }\n            },\n            plotOptions: {\n                series: {\n                    // dataLabels: {\n                    //     enabled: true,\n                    //     style: {\n                    //         fontSize : '15px'\n                    //     }\n                    // }\n                }\n            }\n\n        };\n\n        this.props.series.forEach((serie, i) => {\n            config.yAxis.push({\n                labels  : {\n                    format: '%',\n                    style : {\n                        fontSize: this.getCss().fontSize,\n                        font    : this.getCss().fontSize,\n                        color   : Highcharts.getOptions().colors[1]\n                    }\n                },\n                title   : {\n                    text : serie.name,\n                    style: {\n                        fontSize: this.getCss().fontSize,\n                        color   : Highcharts.getOptions().colors[1]\n                    }\n                },\n                opposite: i > 0,\n            });\n        });\n\n        this.options = Highcharts.merge(config, {\n            series: this.props.series\n        });\n\n        if (this.props.series) this.montaGrafico(this.props.series);\n\n    }\n\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.series && prevProps.series != this.props.series) {\n            this.montaGrafico(this.props.series);\n        }\n\n        if (this.props.modoApresentacao != null && prevProps.modoApresentacao != this.props.modoApresentacao) {\n            this.toggleModoApresentacao();\n        }\n    }\n\n    toggleModoApresentacao = () => {\n\n        console.debug(\"aaaaa\", this);\n        this.options.yAxis[0].labels.style = {\n            fontSize: this.getCss().fontSize,\n            font    : this.getCss().fontSize\n        };\n\n        this.options.xAxis[0].labels.style = {\n            fontSize: this.getCss().fontSize,\n            font    : this.getCss().fontSize\n        };\n\n        this.options.yAxis[0].title.style = {\n            fontSize: this.getCss().fontSize,\n        };\n\n        this.options.yAxis[1].title.style = {\n            fontSize: this.getCss().fontSize,\n        };\n\n        // this.options.series[1].dataLabels.style.fontSize = '42px';\n\n\n        this.options.legend = {\n            itemStyle: {\n                fontSize: this.getCss().fontSize,\n                font    : this.getCss().fontSize,\n            }\n        };\n\n        this.chart = new Highcharts[this.props.type || 'Chart'](\n            this.id,\n            this.options\n        );\n\n    };\n\n\n    componentWillUnmount() {\n        if (this.chart) {\n            this.destroyChart();\n        }\n    }\n\n    montaGrafico(series) {\n\n\n        this.chart = new Highcharts[this.props.type || 'Chart'](\n            this.id,\n            this.options\n        );\n        this.props.series.forEach((serie, i) => {\n            this.chart.yAxis[i].axisTitle.attr({\n                text: serie.name\n            });\n        });\n\n    }\n\n    destroyChart() {\n        this.chart.destroy();\n    }\n\n    render() {\n\n        const {series, chipsFiltros} = this.props;\n\n        return (\n            <div id={this.id}></div>\n        );\n    }\n}\n\nexport default Grafico;\n"]}