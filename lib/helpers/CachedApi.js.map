{"version":3,"sources":["../../src/helpers/CachedApi.js"],"names":["CachedApi","api","_cachedUrls","_api","args","_request","url","params","data","hash","_strToHashCode","JSON","stringify","callType","getCached","_getCachedUrl","Promise","resolve","then","_addCachedUrl","response","catch","error","str","length","i","char","charCodeAt"],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;AAqBA,WAAaA,SAAb;AAEI,uBAAYC,GAAZ,EAAiB;AAAA;;AACb,aAAKC,WAAL,GAAmB,EAAnB;AACA,aAAKC,IAAL,GAAYF,GAAZ;AACH;;AALL;AAAA;AAAA,+BAOkB;AAAA,8CAANG,IAAM;AAANA,oBAAM;AAAA;;AAEV,mBAAO,KAAKC,QAAL,CAAcD,IAAd,EAAoB,MAApB,CAAP;AACH;AAVL;AAAA;AAAA,8BAYiB;AAAA,+CAANA,IAAM;AAANA,oBAAM;AAAA;;AAET,mBAAO,KAAKC,QAAL,CAAcD,IAAd,EAAoB,KAApB,CAAP;AACH;AAfL;AAAA;AAAA,sCAiBkBE,GAjBlB,EAiBuBC,MAjBvB,EAiB+BC,IAjB/B,EAiBqC;;AAE7B,gBAAMC,OAAO,KAAKC,cAAL,MAAuBJ,GAAvB,GAA6BK,KAAKC,SAAL,CAAeL,MAAf,CAA7B,CAAb;AACA,iBAAKL,WAAL,CAAiBO,IAAjB,IAAyBD,IAAzB;AACH;AArBL;AAAA;AAAA,sCAuBkBF,GAvBlB,EAuBuBC,MAvBvB,EAuB+B;AACvB,gBAAME,OAAO,KAAKC,cAAL,MAAuBJ,GAAvB,GAA6BK,KAAKC,SAAL,CAAeL,MAAf,CAA7B,CAAb;AACA,mBAAO,KAAKL,WAAL,CAAiBO,IAAjB,CAAP;AACH;AA1BL;AAAA;AAAA,iCA4BaL,IA5Bb,EA4BmBS,QA5BnB,EA4B6B;AAAA;AAAA;;AAErB,gBAAMP,MAAMF,KAAK,CAAL,CAAZ;AACA,gBAAMG,SAASH,KAAK,CAAL,CAAf;;AAEA,gBAAMU,YAAY,KAAKC,aAAL,CAAmBT,GAAnB,EAAwBC,MAAxB,CAAlB;;AAEA,gBAAIO,SAAJ,EAAe;AACX,uBAAOE,QAAQC,OAAR,CAAgBH,SAAhB,CAAP;AACH;AACD,mBAAO,aAAKX,IAAL,EAAUU,QAAV,iCAAuBT,IAAvB,GACFc,IADE,CACG,oBAAY;AACd,sBAAKC,aAAL,CAAmBb,GAAnB,EAAwBC,MAAxB,EAAgCa,QAAhC;AACA,uBAAOA,QAAP;AACH,aAJE,EAKFC,KALE,CAKI,iBAAS;AACZ,uBAAOC,KAAP;AACH,aAPE,CAAP;AAQH;AA9CL;AAAA;AAAA,uCAgDmBC,GAhDnB,EAgDwB;AAChB,gBAAId,OAAO,CAAX;AACA,gBAAIc,IAAIC,MAAJ,KAAe,CAAnB,EAAsB,OAAOf,IAAP;AACtB,iBAAK,IAAIgB,IAAI,CAAb,EAAgBA,IAAIF,IAAIC,MAAxB,EAAgCC,GAAhC,EAAqC;AACjC,oBAAMC,OAAOH,IAAII,UAAJ,CAAeF,CAAf,CAAb;AACAhB,uBAAQ,CAACA,QAAQ,CAAT,IAAcA,IAAf,GAAuBiB,IAA9B;AACAjB,uBAAOA,OAAOA,IAAd,CAHiC,CAGb;AACvB;AACD,mBAAOA,IAAP;AACH;AAzDL;;AAAA;AAAA","file":"CachedApi.js","sourcesContent":["/**\n * Cachear API\n *\n * Como usar:\n * const cachedApi = new CachedApi(Abstração de uma biblioteca API);\n * Ex.:\n * const cachedApi = new CachedApi(axiosApi);\n *\n *\n * cachedApi.post(url, params)\n * cachedApi.get(url, params)\n * Ex.:\n * cachedApi.post(`/contrato/contrato/agrupamento`, {codigoAgrupadores})\n *\n * todo:\n * - Colocar configuração de tempo de cache\n * - Guardar em storage\n * - Otimizar\n *\n * */\n\nexport class CachedApi {\n\n    constructor(api) {\n        this._cachedUrls = [];\n        this._api = api;\n    }\n\n    post(...args) {\n\n        return this._request(args, 'post');\n    }\n\n    get(...args) {\n\n        return this._request(args, 'get');\n    }\n\n    _addCachedUrl(url, params, data) {\n\n        const hash = this._strToHashCode(`${url}${JSON.stringify(params)}`);\n        this._cachedUrls[hash] = data;\n    }\n\n    _getCachedUrl(url, params) {\n        const hash = this._strToHashCode(`${url}${JSON.stringify(params)}`);\n        return this._cachedUrls[hash];\n    }\n\n    _request(args, callType) {\n\n        const url = args[0];\n        const params = args[1];\n\n        const getCached = this._getCachedUrl(url, params);\n\n        if (getCached) {\n            return Promise.resolve(getCached);\n        }\n        return this._api[callType](...args)\n            .then(response => {\n                this._addCachedUrl(url, params, response);\n                return response;\n            })\n            .catch(error => {\n                return error;\n            });\n    }\n\n    _strToHashCode(str) {\n        let hash = 0;\n        if (str.length === 0) return hash;\n        for (let i = 0; i < str.length; i++) {\n            const char = str.charCodeAt(i);\n            hash = ((hash << 5) - hash) + char;\n            hash = hash & hash; // Convert to 32bit integer\n        }\n        return hash;\n    }\n\n}"]}