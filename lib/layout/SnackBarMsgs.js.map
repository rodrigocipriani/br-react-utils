{"version":3,"sources":["../../src/layout/SnackBarMsgs.js"],"names":["React","Component","PropTypes","css","fixBotton","position","width","bottom","zIndex","SnackBarMsgs","state","counter","msgs","snackMsgs","retorno","map","msg","key","uuid","type","texto","handleSnackClose","props","closeTimer","filter","nextProps","newMsgs","tipo","Date","getTime","setState","concat","propTypes","array","isRequired","number","defaultProps","Snack","timer","initCounter","setInterval","close","stopTimer","clearInterval","text","closeTime","handleClose","style","textClass","cardClass","join","padding","margin","marginTop","maxWidth","right","string","func"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,SAA1B,QAA0C,OAA1C;;AAEA,IAAMC,MAAM;AACRC,eAAW;AACPC,kBAAU,UADH;AAEPC,eAAO,MAFA;AAGPC,gBAAQ,KAHD;AAIPC,gBAAQ;AAJD;AADH,CAAZ;;AASA;;IACMC,Y;;;;;;;;;;;;;;sMAaFC,K,GAAQ;AACJC,qBAAS,CADL;AAEJC,kBAAM;AAFF,S,QAcRC,S,GAAY,YAAM;AACd,gBAAMC,UAAU,MAAKJ,KAAL,CAAWE,IAAX,CAAgBG,GAAhB,CAAoB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC9C,uBAAO,oBAAC,KAAD,IAAO,KAAKD,IAAIE,IAAhB,EAAsB,MAAMF,IAAIE,IAAhC,EAAsC,MAAMF,IAAIG,IAAhD,EAAsD,MAAMH,IAAII,KAAhE;AACO,iCAAa,MAAKC,gBADzB;AAEO,+BAAY,MAAKC,KAAL,CAAWC,UAF9B,GAAP;AAGH,aAJe,CAAhB;;AAMA,mBAAOT,OAAP;AACH,S,QAEDO,gB,GAAmB,UAACH,IAAD,EAAU;AACzB,mBAAO,MAAKR,KAAL,CAAWE,IAAX,CAAgBY,MAAhB,CAAuB,eAAO;AACjC,uBAAOR,IAAIE,IAAJ,IAAYA,IAAnB;AACH,aAFM,CAAP;AAGH,S;;;;;kDAvByBO,S,EAAW;AACjC,gBAAMC,UAAUD,UAAUb,IAAV,CAAeG,GAAf,CAAmB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7CD,oBAAIG,IAAJ,GAAWH,IAAIW,IAAJ,IAAY,MAAvB;AACAX,oBAAIE,IAAJ,GAAW,IAAIU,IAAJ,GAAWC,OAAX,KAAuBZ,GAAlC;AACA,uBAAOD,GAAP;AACH,aAJe,CAAhB;AAKA,iBAAKc,QAAL,CAAc,EAAClB,MAAM,KAAKF,KAAL,CAAWE,IAAX,CAAgBmB,MAAhB,CAAuBL,OAAvB,CAAP,EAAd;AACH;;;iCAmBQ;;AAEL,mBACI;AAAA;AAAA,kBAAK,WAAU,KAAf,EAAqB,OAAOvB,IAAIC,SAAhC;AACI;AAAA;AAAA,sBAAK,WAAU,sBAAf;AACK,yBAAKS,SAAL;AADL;AADJ,aADJ;AAOH;;;;EArDsBZ,S;;AAArBQ,Y,CACKuB,S,GAAY;AACf;AACApB,UAAMV,UAAU+B,KAAV,CAAgBC,UAFP;AAGfX,gBAAYrB,UAAUiC;AAHP,C;AADjB1B,Y,CAOK2B,Y,GAAe;AAClB;AACAxB,UAAM,EAFY;AAGlBW,gBAAY;AAHM,C;;IAiDpBc,K;;;AAkBF,mBAAYf,KAAZ,EAAmB;AAAA;;AAAA,mHACTA,KADS;;AAAA,eAKnBZ,KALmB,GAKX;AACJC,qBAAS;AADL,SALW;AAAA,eASnB2B,KATmB,GASX,IATW;;AAAA,eAUnBC,WAVmB,GAUL,YAAM;AAChB,mBAAKD,KAAL,GAAaE,YAAY,YAAM;AAC3B,uBAAKV,QAAL,CAAc,EAACnB,SAAS,OAAKD,KAAL,CAAWC,OAAX,GAAqB,CAA/B,EAAd;AACH,aAFY,EAEV,IAFU,CAAb;AAGH,SAdkB;;AAAA,eAwBnB8B,KAxBmB,GAwBX,YAAM;AACV,mBAAKC,SAAL;AACA,mBAAKZ,QAAL,CAAc,EAACnB,SAAS,IAAV,EAAd;AACH,SA3BkB;;AAEf,eAAK4B,WAAL;AAFe;AAGlB;;;;+CAasB;AACnB,iBAAKG,SAAL;AACH;;;oCAEW;AACRC,0BAAc,KAAKL,KAAnB;AACH;;;iCAOQ;AAAA;;AAAA,gBAEE3B,OAFF,GAEa,KAAKD,KAFlB,CAEEC,OAFF;AAAA,yBAG8C,KAAKW,KAHnD;AAAA,gBAGEH,IAHF,UAGEA,IAHF;AAAA,gBAGQyB,IAHR,UAGQA,IAHR;AAAA,gBAGcC,SAHd,UAGcA,SAHd;AAAA,gBAGyB3B,IAHzB,UAGyBA,IAHzB;AAAA,gBAG+B4B,WAH/B,UAG+BA,WAH/B;;;AAKL,gBAAInC,WAAWkC,SAAf,EAA0B;AACtB,qBAAKH,SAAL;AACAI,4BAAY5B,IAAZ;AACA,uBAAO,IAAP;AACH;;AAED,gBAAM6B,QAAQ,EAAd;AACAA,kBAAM,MAAN,IAAgB;AACZC,2BAAW,YADC;AAEZC,2BAAW;AAFC,aAAhB;AAIAF,kBAAM,SAAN,IAAmB;AACfC,2BAAW,YADI;AAEfC,2BAAW;AAFI,aAAnB;AAIAF,kBAAM,SAAN,IAAmB;AACfC,2BAAW,yBADI;AAEfC,2BAAW;AAFI,aAAnB;AAIAF,kBAAM,QAAN,IAAkB;AACdC,2BAAW,YADG;AAEdC,2BAAW;AAFG,aAAlB;;AAKA;AACA,mBACI;AAAA;AAAA,kBAAK,WAAW,CAAC,yBAAD,EAA4BF,MAAM5B,IAAN,EAAY8B,SAAxC,EAAmDC,IAAnD,CAAwD,GAAxD,CAAhB;AACK,2BAAO;AACHC,iCAAS,EADN;AAEH7C,+BAAO,KAFJ;AAGH8C,gCAAQ,QAHL;AAIHC,mCAAW,CAJR;AAKHC,kCAAU,GALP;AAMHjD,kCAAU;AANP,qBADZ;AASQ;AAAA;AAAA,sBAAM,WAAW0C,MAAM5B,IAAN,EAAY6B,SAA7B;AACIJ;AADJ,iBATR;AAYI;AAAA;AAAA,sBAAG,SAAS;AAAA,mCAAM,OAAKH,KAAL,EAAN;AAAA,yBAAZ,EAAgC,MAAK,aAArC,EAAmD,OAAO,EAACpC,UAAU,UAAX,EAAuBkD,OAAO,EAA9B,EAA1D;AACG,mCAAW,CAACR,MAAM5B,IAAN,EAAY6B,SAAb,EAAwBE,IAAxB,CAA6B,GAA7B,CADd;AAAA;AAAA;AAZJ,aADJ;AAiBH;;;;EA9FejD,S;;AAAdoC,K,CAEKL,S,GAAY;AACfb,UAAMjB,UAAUsD,MADD;AAEfZ,UAAM1C,UAAUsD,MAAV,CAAiBtB,UAFR;AAGfW,eAAW3C,UAAUiC,MAHN;AAIfjB,UAAMhB,UAAUiC,MAJD;AAKfW,iBAAa5C,UAAUuD,IAAV,CAAevB;AALb,C;AAFjBG,K,CAUKD,Y,GAAe;AAClBjB,UAAM,MADY;AAElByB,UAAM,EAFY;AAGlBC,eAAW,CAHO;AAIlB3B,UAAM,IAJY;AAKlB4B,iBAAa;AALK,C;;AAsF1B;;AAEA,eAAerC,YAAf","file":"SnackBarMsgs.js","sourcesContent":["import React, {Component, PropTypes} from \"react\";\r\n\r\nconst css = {\r\n    fixBotton: {\r\n        position: 'absolute',\r\n        width: '100%',\r\n        bottom: '0px',\r\n        zIndex: 9999\r\n    }\r\n};\r\n\r\n// todo - implementar que no onmousehover o contador de tempo fica parado e a msg nÃ£o fecha\r\nclass SnackBarMsgs extends Component {\r\n    static propTypes = {\r\n        // children: PropTypes.object,\r\n        msgs: PropTypes.array.isRequired,\r\n        closeTimer: PropTypes.number\r\n    };\r\n\r\n    static defaultProps = {\r\n        // children: null,\r\n        msgs: [],\r\n        closeTimer: 5\r\n    };\r\n\r\n    state = {\r\n        counter: 0,\r\n        msgs: []\r\n    };\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        const newMsgs = nextProps.msgs.map((msg, key) => {\r\n            msg.type = msg.tipo || 'info';\r\n            msg.uuid = new Date().getTime() + key;\r\n            return msg;\r\n        });\r\n        this.setState({msgs: this.state.msgs.concat(newMsgs)});\r\n    }\r\n\r\n    snackMsgs = () => {\r\n        const retorno = this.state.msgs.map((msg, key) => {\r\n            return <Snack key={msg.uuid} uuid={msg.uuid} type={msg.type} text={msg.texto}\r\n                          handleClose={this.handleSnackClose}\r\n                          closeTime={(this.props.closeTimer)}/>;\r\n        });\r\n\r\n        return retorno;\r\n    };\r\n\r\n    handleSnackClose = (uuid) => {\r\n        return this.state.msgs.filter(msg => {\r\n            return msg.uuid != uuid;\r\n        });\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"row\" style={css.fixBotton}>\r\n                <div className=\"col s12 center-align\">\r\n                    {this.snackMsgs()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Snack extends Component {\r\n\r\n    static propTypes = {\r\n        type: PropTypes.string,\r\n        text: PropTypes.string.isRequired,\r\n        closeTime: PropTypes.number,\r\n        uuid: PropTypes.number,\r\n        handleClose: PropTypes.func.isRequired\r\n    };\r\n\r\n    static defaultProps = {\r\n        type: 'info',\r\n        text: '',\r\n        closeTime: 5,\r\n        uuid: null,\r\n        handleClose: {}\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.initCounter();\r\n    }\r\n\r\n    state = {\r\n        counter: 0\r\n    };\r\n\r\n    timer = null;\r\n    initCounter = () => {\r\n        this.timer = setInterval(() => {\r\n            this.setState({counter: this.state.counter + 1});\r\n        }, 1000);\r\n    };\r\n\r\n    componentWillUnmount() {\r\n        this.stopTimer();\r\n    }\r\n\r\n    stopTimer() {\r\n        clearInterval(this.timer);\r\n    }\r\n\r\n    close = () => {\r\n        this.stopTimer();\r\n        this.setState({counter: 9999});\r\n    };\r\n\r\n    render() {\r\n\r\n        const {counter} = this.state;\r\n        const {type, text, closeTime, uuid, handleClose} = this.props;\r\n\r\n        if (counter >= closeTime) {\r\n            this.stopTimer();\r\n            handleClose(uuid);\r\n            return null;\r\n        }\r\n\r\n        const style = [];\r\n        style['info'] = {\r\n            textClass: 'white-text',\r\n            cardClass: 'grey darken-1'\r\n        };\r\n        style['success'] = {\r\n            textClass: 'white-text',\r\n            cardClass: 'green darken-2'\r\n        };\r\n        style['warning'] = {\r\n            textClass: 'grey-text text-darken-4',\r\n            cardClass: 'orange lighten-2'\r\n        };\r\n        style['danger'] = {\r\n            textClass: 'white-text',\r\n            cardClass: 'deep-orange darken-4'\r\n        };\r\n\r\n        // todo : trocar o ok por button\r\n        return (\r\n            <div className={['card-panel center-align', style[type].cardClass].join(' ')}\r\n                 style={{\r\n                     padding: 10,\r\n                     width: '80%',\r\n                     margin: '0 auto',\r\n                     marginTop: 5,\r\n                     maxWidth: 400,\r\n                     position: 'relative'\r\n                 }}>\r\n                    <span className={style[type].textClass}>\r\n                       {text}\r\n                    </span>\r\n                <a onClick={() => this.close()} href=\"javascript:\" style={{position: 'absolute', right: 15}}\r\n                   className={[style[type].textClass].join(' ')}>OK</a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n;\r\n\r\nexport default SnackBarMsgs;"]}